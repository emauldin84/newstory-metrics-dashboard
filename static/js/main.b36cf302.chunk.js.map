{"version":3,"sources":["Utils/query.js","components/Metric/Metric.js","components/Refresh/Refresh.js","components/ComparisonFrequency/ComparisonFrequency.js","components/Key/Key.js","components/Spinner/Spinner.js","components/Dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["setCompData","data","frequency","setCompMetrics","setPrevCompMetrics","setPrevPeriodTotals","compDate","moment","subtract","format","filteredCompData","Object","keys","forEach","category","result","filter","item","endex","createdAt","indexOf","substring","prevFreq","prevCompDate","filteredPrevCompData","previousPeriodTotals","signInUser","setUserToken","a","axios","post","query","headers","then","res","console","log","token","catch","err","fetchData","setCurrentMetrics","setComparisonMetrics","setPreviousComparisonMetrics","setPreviousPeriodTotals","setFetching","Metric","props","metrics","metricsData","metricsDataDisplay","map","key","currentValue","current","pastValue","Math","abs","comparison","compClass","compArrow","compPerc","toFixed","asterisk","className","toUpperCase","id","onClick","handleMetricClick","Refresh","title","ComparisonFrequency","monthClass","quarterClass","yearClass","handleFrequencyClick","Key","Spinner","Dashboard","useState","currentMetrics","comparisonMetrics","previousComparisonMetrics","setFrequency","refresh","setRefresh","userToken","fetching","useEffect","handleFetchData","nsData","currentActiveUsers","prevActiveUsers","currentActiveOrgs","prevActiveOrgs","m","prevDate","active","lastSignInAt","lastSignIn","org","users","user","length","new","total","metricsDisplay","cM","dashDisplay","alt","src","freq","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b36cf302.chunk.js","sourcesContent":["import axios from 'axios'\nimport moment from 'moment'\n\nconst signInUser = async (setUserToken) => {\n    await axios.post(\"https://api-dev.newstory.io/graphql\", \n        {\n            query: `\n                mutation { signInUser(email: \"emauldin84@gmail.com\", password:\"thrivenotsurvive\"){\n                token\n                viewer { \n                    uuid \n                    email \n                    firstName \n                    lastName \n                } \n            } \n        }\n        `\n        },\n        {\n            headers: {\n            \"X-Api-Key\": \"54125abed83236f363b8330eefe6f4e3\",\n            'Content-Type': 'application/json'\n            }\n        })\n        .then(res => {\n            console.log(res)\n            setUserToken(res.data.data.signInUser.token)\n        })\n        .catch(err => {\n            throw err\n        })\n}\n\nconst fetchData = (token, frequency, setCurrentMetrics, setComparisonMetrics, setPreviousComparisonMetrics, setPreviousPeriodTotals, setFetching) => {\n    axios.post(\"https://api-dev.newstory.io/graphql\", \n    {\n        query: `\n            query {\n                users {\n                    uuid\n                    username\n                    createdAt\n                    lastSignInAt\n                    }\n                organizations{\n                    uuid\n                    name\n                    createdAt\n                    users {\n                        uuid\n                    username\n                        lastSignInAt\n                        }\n                    }\n                recipients{\n                    uuid\n                    name\n                    createdAt\n                    updatedAt\n                }\n                submissions {\n                    uuid\n                    surveyor {\n                        firstName\n                        lastName\n                        username\n                    }\n                    createdAt \n                }\n            }\n        `\n    },\n    {\n        headers: {\n        \"Authorization\": token,\n        \"X-Api-Key\": \"54125abed83236f363b8330eefe6f4e3\",\n        'Content-Type': 'application/json'\n        }\n    })\n    .then(res => {\n        console.log('CUR DATA ',res.data.data)\n        // setting current data\n        setCurrentMetrics(res.data.data)\n        setCompData(res.data.data, frequency, setComparisonMetrics, setPreviousComparisonMetrics, setPreviousPeriodTotals)\n        setFetching(false)\n    })\n    .catch(err => {\n        throw err\n    })\n}\n\nconst setCompData = (data, frequency, setCompMetrics, setPrevCompMetrics, setPrevPeriodTotals) => {\n    // setting comparison data based on set frequency\n    let compDate = moment().subtract(frequency[1], 'days').format('YYYY-MM-DD')\n    let filteredCompData = {}\n    Object.keys(data).forEach(category => {\n        let result  = data[category].filter(item => {\n            let endex = item.createdAt.indexOf('T')\n            let createdAt = item.createdAt.substring(0, endex)\n            return createdAt > compDate\n        })\n        filteredCompData[category] = result\n    })\n    setCompMetrics(filteredCompData)\n\n    // setting previous comparison data based on set frequency to determine 'new' users/orgs rate.\n    let prevFreq = frequency[1] * 2\n    let prevCompDate = moment().subtract(prevFreq, 'days').format('YYYY-MM-DD')\n    let filteredPrevCompData = {}\n    Object.keys(data).forEach(category => {\n        let result  = data[category].filter(item => {\n            let endex = item.createdAt.indexOf('T')\n            let createdAt = item.createdAt.substring(0, endex)\n            return createdAt > prevCompDate && createdAt < compDate\n        })\n        filteredPrevCompData[category] = result\n    })\n    setPrevCompMetrics(filteredPrevCompData)\n\n    // setting previous period totals for comparison to current period total\n    let previousPeriodTotals = {}\n    Object.keys(data).forEach(category => {\n        let result  = data[category].filter(item => {\n            let endex = item.createdAt.indexOf('T')\n            let createdAt = item.createdAt.substring(0, endex)\n            return createdAt < compDate\n        })\n        previousPeriodTotals[category] = result\n    })\n    setPrevPeriodTotals(previousPeriodTotals)\n}\n\nexport default {\n    signInUser,\n    setCompData,\n    fetchData,\n}","import React from 'react'\n\nimport './Metric.css'\n\nlet Metric = (props) => {\n    console.log(props.metrics, 'metricsData', props.metricsData)\n    let metricsDataDisplay = Object.keys(props.metricsData).map(key => {\n        let currentValue = props.metricsData[key].current\n        let pastValue = Math.abs(props.metricsData[key].comparison)\n        let comparison = currentValue - pastValue\n        let compClass = comparison > 0 ? 'comparison positive' : comparison < 0 ? 'comparison negative' : 'comparison'\n        let compArrow = comparison > 0 ? '↑' : comparison < 0 ? '↓' : null\n        let compPerc = ((Math.abs(comparison) / Math.abs(pastValue)) * 100).toFixed(2)\n        let asterisk = Math.abs(currentValue) > 0 && pastValue === 0 ? '*' : null\n\n        return  <div key={key}className='metric-inline-display'>\n                    <div className='metric-title-container'>\n                        <p>{key[0].toUpperCase()+key.substring(1)} {props.metrics[0].toUpperCase()+props.metrics.substring(1)}</p>\n                    </div>\n                    <div className='metric-data-container'>\n                        <p className='current'>{currentValue}</p>\n                        <p className={compClass}>{compArrow}{compPerc}%{asterisk}</p>\n                    </div>\n            \n                </div>\n    })\n    return (\n        <div className='container'>\n            <div id={props.metrics} className={`metric-container ${props.metrics}-container`} onClick={props.handleMetricClick}>\n                {metricsDataDisplay}\n            </div>\n        </div>\n    )\n}\n\nexport default Metric","import React from 'react'\n\nimport './Refresh.css'\n\nconst Refresh = (props) => {\n\n    const handleRefreshClick = () => {\n        props.setFetching(true)\n        props.fetchData()\n    }\n    return (\n        <div className='refresh' title='refresh data' onClick={handleRefreshClick}>\n            ⟳\n        </div>\n    )\n}\n\nexport default Refresh","import React from 'react'\n\nimport './ComparisonFrequency.css'\n\nimport Refresh from '../Refresh/Refresh'\n\nlet ComparisonFrequency = (props) => {\n    let monthClass = props.frequency[0] === 'month' ? 'active frequency month' : 'frequency month'\n    let quarterClass = props.frequency[0] === 'quarter' ? 'active frequency quarter' : 'frequency quarter'\n    let yearClass = props.frequency[0] === 'year' ? 'active frequency year' : 'frequency year'\n    return (\n        <div className='comparison-container'>\n            <p className='frequency-title'>Comparison Frequency</p>\n            <div className='frequency-selector'>\n                <Refresh fetchData={props.fetchData} setFetching={props.setFetching}/>\n                <p className={monthClass} onClick={() => props.handleFrequencyClick(['month', 30])}>month</p>\n                <p className='divider'>|</p>\n                <p className={quarterClass} onClick={() => props.handleFrequencyClick(['quarter', 91])}>quarter</p>\n                <p className='divider'>|</p>\n                <p className={yearClass} onClick={() => props.handleFrequencyClick(['year', 365])}>year</p>\n            </div>\n        </div>\n    )\n}\n\nexport default ComparisonFrequency","import React from 'react'\n\nimport './Key.css'\nlet Key = () => {\n    return(\n        <div className='key-container'>\n            <p>* Percent change from zero</p>\n        </div>\n    )\n}\n\nexport default Key","import React from 'react'\nimport './Spinner.css'\n\nlet Spinner = () => {\n    return (\n        <div className='loader-backdrop'>\n            <div className=\"loader\"></div>\n            <div className=\"loader-text\">Fetching...</div>\n        </div>\n    )\n}\n\nexport default Spinner","import React, { useState, useEffect } from 'react';\nimport moment from 'moment'\n\nimport query from '../../Utils/query'\n\nimport './Dashboard.css';\nimport Metric from '../Metric/Metric'\nimport ComparisonFrequency from '../ComparisonFrequency/ComparisonFrequency'\n// import Modal from '../Modal/Modal'\nimport Key from '../Key/Key'\nimport Spinner from '../Spinner/Spinner'\n\nlet Dashboard = () => {\n    const [currentMetrics, setCurrentMetrics] = useState([])\n    const [comparisonMetrics, setComparisonMetrics] = useState([])\n    const [previousComparisonMetrics, setPreviousComparisonMetrics] = useState([])\n    const [previousPeriodTotals, setPreviousPeriodTotals] = useState([])\n    const [frequency, setFrequency] = useState(['month', 30])\n    const [refresh, setRefresh] = useState(true)\n    const [userToken, setUserToken] = useState(null)\n    const [fetching, setFetching] = useState(true)\n    // const [selectedMetric, setSelectedMetric] = useState(null)\n    \n    useEffect(() => {\n        query.signInUser(setUserToken)\n    }, [])\n\n    useEffect(() => {\n        if(userToken){\n            query.setCompData(currentMetrics, frequency, setComparisonMetrics, setPreviousComparisonMetrics, setPreviousPeriodTotals)\n        }\n    }, [userToken, frequency])\n    \n    useEffect(() => {\n        if(userToken){\n            handleFetchData()\n        }\n    }, [userToken])\n    \n    // const handleMetricClick = (e) => {\n    //     let selected = metrics.filter(metric => {\n    //         return metric.base === e.target.id\n    //     })\n    //     setSelectedMetric(...selected)\n    // }\n\n    // const handleBackgroundClick = () => {\n    //     setSelectedMetric(null)\n    // }\n\n    const handleFrequencyClick = (freq) => {\n        if (freq[1] !== frequency[1]){\n            setFrequency(freq)\n        }\n    }\n    const handleRefresh = () => {\n        setRefresh(!refresh)\n    }\n\n    const handleFetchData = () => {\n        query.fetchData(userToken, frequency, setCurrentMetrics, setComparisonMetrics, setPreviousComparisonMetrics, setPreviousPeriodTotals, setFetching)\n    }\n\n    // builds out data structure to compare current to previous periods\n    const nsData = {}\n    let currentActiveUsers = []\n    let prevActiveUsers = []\n    let currentActiveOrgs = []\n    let prevActiveOrgs = []\n    Object.keys(currentMetrics).forEach(m => {\n        let compDate = moment().subtract(frequency[1], 'days').format('YYYY-MM-DD')\n        let prevDate = moment().subtract((frequency[1] * 2), 'days').format('YYYY-MM-DD')\n\n        if (m === 'users') {\n            currentActiveUsers = currentMetrics[m].filter(active => {\n                let endex = active.lastSignInAt ? active.lastSignInAt.indexOf('T') : null\n                let lastSignIn = active.lastSignInAt ? active.lastSignInAt.substring(0, endex) : null\n                return lastSignIn > compDate\n            })\n            prevActiveUsers = currentMetrics[m].filter(active => {\n                let endex = active.lastSignInAt ? active.lastSignInAt.indexOf('T') : null\n                let lastSignIn = active.lastSignInAt ? active.lastSignInAt.substring(0, endex) : null\n                return lastSignIn > prevDate && lastSignIn < compDate\n            })\n        }\n\n        if (m === 'organizations') {\n            currentActiveOrgs = currentMetrics[m].map(org => {\n                let activeUsers = org.users.filter(user => {\n                    let endex = user.lastSignInAt ? user.lastSignInAt.indexOf('T') : null\n                    let lastSignIn = user.lastSignInAt ? user.lastSignInAt.substring(0, endex) : null\n                    if (lastSignIn <= compDate) return false\n                    return lastSignIn > compDate\n                })\n                return activeUsers\n            }).filter (org => {\n                return org.length >= 1\n            })\n\n            prevActiveOrgs = currentMetrics[m].map(org => {\n                let activeUsers = org.users.filter(user => {\n                    let endex = user.lastSignInAt ? user.lastSignInAt.indexOf('T') : null\n                    let lastSignIn = user.lastSignInAt ? user.lastSignInAt.substring(0, endex) : null\n                    return lastSignIn > prevDate && lastSignIn < compDate\n                })\n                return activeUsers\n            }).filter (org => {\n                return org.length >= 1\n            })\n        }\n\n        nsData[m] = comparisonMetrics[m] && previousComparisonMetrics[m] && previousPeriodTotals[m] ? \n        m === 'organizations' || m === 'users' ? \n        {\n            active: {\n                current: m === 'organizations' ? currentActiveOrgs.length : currentActiveUsers.length,\n                comparison: m === 'organizations' ? prevActiveOrgs.length : prevActiveUsers.length\n            },\n            new: {\n                current: comparisonMetrics[m].length,\n                comparison: previousComparisonMetrics[m].length\n            },\n            total: {\n                current: currentMetrics[m].length,\n                comparison: previousPeriodTotals[m].length\n            },\n        } \n        :\n        {\n            new: {\n                current: comparisonMetrics[m].length,\n                comparison: previousComparisonMetrics[m].length\n            },\n            total: {\n                current: currentMetrics[m].length,\n                comparison: previousPeriodTotals[m].length\n            },\n        }\n        \n        : null\n\n    })\n    let metricsDisplay = Object.keys(nsData).map(cM => {\n        return <Metric \n                    key={cM} \n                    metrics={cM}\n                    metricsData={nsData[cM]}\n                    frequency={frequency}\n                    // selectedMetric={selectedMetric} \n                    // handleMetricClick={handleMetricClick}\n                    />\n    })\n\n    // let modal = selectedMetric ? <Modal selectedMetric={selectedMetric} handleBackgroundClick={handleBackgroundClick}/> : null\n    let dashDisplay = fetching ? <Spinner /> : \n    <div>\n        {metricsDisplay}\n        <Key />\n    </div>\n\n    return (\n        <div className=\"dashboard-container\" >\n            <div className='logo-container'>\n                <img className='logo' alt='New Story Logo' src='https://360kk73nf60j1amgkj11crnq-wpengine.netdna-ssl.com/wp-content/themes/newstory/src/img/logo.png' onClick={handleRefresh}/>\n            </div>\n            <ComparisonFrequency handleFrequencyClick={handleFrequencyClick} frequency={frequency} fetchData={handleFetchData} setFetching={setFetching}/>\n            <div className='title-display'>\n                <p className='titles' id='title-metric'><b>Metric</b></p>\n                <p className='titles' id='title-value'><b>Value</b></p>\n                <p className='titles' id='title-comparison'><b>Comparison</b></p>\n            </div>\n            {dashDisplay}\n        </div>\n    );\n}\n\nexport default Dashboard;","import React from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard/Dashboard'\n\nlet App = () => {\n\n  return (\n    <div className=\"App\">\n        <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}