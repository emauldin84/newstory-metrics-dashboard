{"version":3,"sources":["components/Metric/Metric.js","components/ComparisonFrequency/ComparisonFrequency.js","components/Dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["Metric","props","metricsDataDisplay","Object","keys","metricsData","map","key","comparison","current","frequency","compClass","compArrow","compPerc","Math","abs","toFixed","className","toUpperCase","substring","metrics","id","onClick","handleMetricClick","ComparisonFrequency","monthClass","quarterClass","yearClass","handleFrequencyClick","Dashboard","useState","setFrequency","refresh","setRefresh","nsMetrics","users","active","lastMonth","lastQuarter","lastYear","new","total","organizations","recipients","submissions","metricsDisplay","m","alt","src","console","log","freq","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a2192ae0.chunk.js","sourcesContent":["import React from 'react'\n\nimport './Metric.css'\n\nlet Metric = (props) => {\n    let metricsDataDisplay = Object.keys(props.metricsData).map(key => {\n        let comparison = props.metricsData[key].current - props.metricsData[key][props.frequency]\n        let compClass = comparison > 0 ? 'comparison positive' : comparison < 0 ? 'comparison negative' : 'comparison'\n        let compArrow = comparison > 0 ? '↑' : comparison < 0 ? '↓' : null\n        let compPerc = ((Math.abs(comparison) / props.metricsData[key][props.frequency]) * 100).toFixed(2)\n\n        return  <div key={key}className='metric-inline-display'>\n                    <div className='metric-title-container'>\n                        <p>{key[0].toUpperCase()+key.substring(1)} {props.metrics[0].toUpperCase()+props.metrics.substring(1)}</p>\n                    </div>\n                    <div className='metric-data-container'>\n                        <p className='current'>{props.metricsData[key].current}</p>\n                        <p className={compClass}>{compArrow}{compPerc}%</p>\n                    </div>\n            \n                </div>\n    })\n    return (\n        <div className='container'>\n            <div id={props.metrics} className={`metric-container ${props.metrics}-container`} onClick={props.handleMetricClick}>\n                {metricsDataDisplay}\n            </div>\n        </div>\n    )\n}\n\nexport default Metric","import React from 'react'\n\nimport './ComparisonFrequency.css'\n\nlet ComparisonFrequency = (props) => {\n    let monthClass = props.frequency === 'lastMonth' ? 'active frequency month' : 'frequency month'\n    let quarterClass = props.frequency === 'lastQuarter' ? 'active frequency quarter' : 'frequency quarter'\n    let yearClass = props.frequency === 'lastYear' ? 'active frequency year' : 'frequency year'\n    return (\n        <div className='comparison-container'>\n            <p className='frequency-title'>Comparison Frequency</p>\n            <div className='frequency-selector'>\n                <p className={monthClass} onClick={() => props.handleFrequencyClick('lastMonth')}>month</p>\n                <p className={quarterClass} onClick={() => props.handleFrequencyClick('lastQuarter')}>quarter</p>\n                <p className={yearClass} onClick={() => props.handleFrequencyClick('lastYear')}>year</p>\n            </div>\n        </div>\n    )\n}\n\nexport default ComparisonFrequency","import React, { useState, useEffect } from 'react';\n// import axios from 'axios'\n\nimport './Dashboard.css';\nimport Metric from '../Metric/Metric'\nimport ComparisonFrequency from '../ComparisonFrequency/ComparisonFrequency'\nimport Modal from '../Modal/Modal'\n\nlet Dashboard = () => {\n    // const [metrics, setMetrics] = useState([])\n    const [frequency, setFrequency] = useState('lastMonth')\n    const [refresh, setRefresh] = useState(true)\n    // const [fetching, setFetching] = useState(false)\n    // const [selectedMetric, setSelectedMetric] = useState(null)\n    let nsMetrics = {\n        users: {\n            active: {\n                current: 39,\n                lastMonth: 39,\n                lastQuarter: 30,\n                lastYear: 10,\n            },\n            new: {\n                current: 8,\n                lastMonth: 7,\n                lastQuarter: 12,\n                lastYear: 5,\n            },\n            total: {\n                current: 812,\n                lastMonth: 804,\n                lastQuarter: 797,\n                lastYear: 785,\n            },\n        },\n        organizations: {\n            active: {\n                current: 39,\n                lastMonth: 36,\n                lastQuarter: 30,\n                lastYear: 10,\n            },\n            new: {\n                current: 8,\n                lastMonth: 7,\n                lastQuarter: 12,\n                lastYear: 5,\n            },\n            total: {\n                current: 812,\n                lastMonth: 804,\n                lastQuarter: 797,\n                lastYear: 785,\n            },\n        },\n        recipients: {\n            new: {\n                current: 3,\n                lastMonth: 4,\n                lastQuarter: 1,\n                lastYear: 7,\n            },\n            total: {\n                current: 483,\n                lastMonth: 475,\n                lastQuarter: 400,\n                lastYear: 200,\n            },\n        },\n        submissions: {\n            new: {\n                current: 3,\n                lastMonth: 4,\n                lastQuarter: 1,\n                lastYear: 7,\n            },\n            total: {\n                current: 483,\n                lastMonth: 413,\n                lastQuarter: 303,\n                lastYear: 116,\n            },\n        },\n    }\n\n    \n    // NOT NECESSARY UNTIL WE RECEIVE API INFO FROM MORGAN\n\n    // useEffect(() => {\n    //     setFetching(true)\n    //     currencies.forEach(currency => {\n    //         fetchData(currency)\n    //     })\n    //     return () => setFetching(false)\n    // },[fetching])\n    \n    // const fetchData = (cur) => {\n    //     axios.get(`https://api.exchangerate-api.com/v4/latest/${cur}`)\n    //     .then(res => {\n    //         if (fetching){\n    //             setMetrics(metrics => [...metrics, res.data])\n    //         }\n    //     })\n    //     .catch(err => {\n    //         console.log(err)\n    //     })\n    // }\n\n    // const handleMetricClick = (e) => {\n    //     let selected = metrics.filter(metric => {\n    //         return metric.base === e.target.id\n    //     })\n    //     setSelectedMetric(...selected)\n    // }\n\n    // const handleBackgroundClick = () => {\n    //     setSelectedMetric(null)\n    // }\n    const handleFrequencyClick = (freq) => {\n        setFrequency(freq)\n    }\n    const handleRefresh = () => {\n        setRefresh(!refresh)\n        console.log('refreshing page!')\n    }\n    \n    let metricsDisplay = Object.keys(nsMetrics).map(m => {\n        return <Metric \n                    key={m} \n                    metricsData={nsMetrics[m]}\n                    metrics={m}\n                    frequency={frequency}\n                    // selectedMetric={selectedMetric} \n                    // handleMetricClick={handleMetricClick}\n                    />\n    })\n\n    // let modal = selectedMetric ? <Modal selectedMetric={selectedMetric} handleBackgroundClick={handleBackgroundClick}/> : null\n\n    return (\n        <div className=\"dashboard-container\" >\n            <div className='logo-container'>\n                <img className='logo' alt='New Story Logo' src='https://360kk73nf60j1amgkj11crnq-wpengine.netdna-ssl.com/wp-content/themes/newstory/src/img/logo.png' onClick={handleRefresh}/>\n            </div>\n            <ComparisonFrequency handleFrequencyClick={handleFrequencyClick} frequency={frequency}/>\n            <div className='title-display'>\n                <p className='titles' id='title-metric'><b>Metric</b></p>\n                <p className='titles' id='title-value'><b>Value</b></p>\n                <p className='titles' id='title-comparison'><b>Comparison</b></p>\n            </div>\n            {metricsDisplay}\n            {/* {modal} */}\n        </div>\n    );\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard/Dashboard'\n\nlet App = () => {\n\n  return (\n    <div className=\"App\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}