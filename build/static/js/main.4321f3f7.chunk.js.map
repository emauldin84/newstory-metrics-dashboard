{"version":3,"sources":["Utils/query.js","components/Metric/Metric.js","components/ComparisonFrequency/ComparisonFrequency.js","components/Key/Key.js","components/Spinner/Spinner.js","components/Refresh/Refresh.js","components/Dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["setCompData","data","frequency","setCompMetrics","setPrevCompMetrics","setPrevPeriodTotals","compDate","moment","subtract","format","filteredCompData","Object","keys","forEach","category","result","filter","item","endex","createdAt","indexOf","substring","prevFreq","prevCompDate","filteredPrevCompData","previousPeriodTotals","signInUser","setUserToken","a","axios","post","query","headers","then","res","token","catch","err","fetchData","setCurrentMetrics","setComparisonMetrics","setPreviousComparisonMetrics","setPreviousPeriodTotals","setFetching","Metric","props","metricsDataDisplay","metricsData","map","key","currentValue","current","pastValue","Math","abs","comparison","difference","compClass","compArrow","compPerc","toFixed","asterisk","className","toUpperCase","metrics","id","onClick","handleMetricClick","ComparisonFrequency","monthClass","quarterClass","yearClass","handleFrequencyClick","Key","role","aria-label","Spinner","Refresh","title","Dashboard","useState","currentMetrics","comparisonMetrics","previousComparisonMetrics","setFrequency","userToken","fetching","useEffect","handleFetchData","nsData","currentActiveUsers","prevActiveUsers","currentActiveOrgs","prevActiveOrgs","m","prevDate","user","lastSignInAt","lastSignIn","comments","comment","createdAtEndex","updatedAtEndex","updatedAt","createdTasks","task","length","org","activeUsers","users","activeComments","activeQuestions","questions","question","activeSurveys","surveys","survey","changedAtEndex","changedAt","activeTasks","tasks","completedAtEndex","completedAt","active","new","total","metricsDisplay","categoryMetrics","dashDisplay","href","target","alt","src","freq","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4321f3f7.chunk.js","sourcesContent":["import axios from 'axios'\nimport moment from 'moment'\n\nconst signInUser = async (setUserToken) => {\n    await axios.post(\"https://api-dev.newstory.io/graphql\", \n        {\n            query: `\n                mutation { signInUser(email: \"emauldin84@gmail.com\", password:\"thrivenotsurvive\"){\n                token\n                viewer { \n                    uuid \n                    email \n                    firstName \n                    lastName \n                } \n            } \n        }\n        `\n        },\n        {\n            headers: {\n            \"X-Api-Key\": \"54125abed83236f363b8330eefe6f4e3\",\n            'Content-Type': 'application/json'\n            }\n        })\n        .then(res => {\n            // console.log(res)\n            setUserToken(res.data.data.signInUser.token)\n        })\n        .catch(err => {\n            throw err\n        })\n}\n\n\nconst fetchData = (token, frequency, setCurrentMetrics, setComparisonMetrics, setPreviousComparisonMetrics, setPreviousPeriodTotals, setFetching) => {\n    axios.post(\"https://api-dev.newstory.io/graphql\", \n    {\n        query: `\n        query {\n            users {\n                uuid\n                username\n                createdAt\n                lastSignInAt\n                comments {\n                    createdAt\n                    updatedAt\n                }\n                createdTasks {\n                    createdAt\n                    updatedAt\n                }\n            }\n            organizations{\n                name\n                createdAt\n                users {\n                    uuid\n                    username\n                    lastSignInAt\n                }\n                comments {\n                    createdAt\n                    updatedAt\n                }\n                questions {\n                    createdAt\n                    updatedAt\n                }\n                surveys {\n                    createdAt\n                    updatedAt\n                    changedAt\n                }\n                tasks{\n                    createdAt\n                    updatedAt\n                    completedAt\n                    }\n            }\n            recipients{\n                uuid\n                name\n                createdAt\n                updatedAt\n            }\n            submissions {\n                uuid\n                createdAt \n            }\n        }\n        `\n    },\n    {\n        headers: {\n        \"Authorization\": token,\n        \"X-Api-Key\": \"54125abed83236f363b8330eefe6f4e3\",\n        'Content-Type': 'application/json'\n        }\n    })\n    .then(res => {\n        // console.log('CUR DATA ',res.data.data)\n        // setting current data\n        setCurrentMetrics(res.data.data)\n        setCompData(res.data.data, frequency, setComparisonMetrics, setPreviousComparisonMetrics, setPreviousPeriodTotals)\n        setFetching(false)\n    })\n    .catch(err => {\n        throw err\n    })\n}\n\nconst setCompData = (data, frequency, setCompMetrics, setPrevCompMetrics, setPrevPeriodTotals) => {\n    // setting comparison data based on set frequency\n    let compDate = moment().subtract(frequency[1], 'days').format('YYYY-MM-DD')\n    let filteredCompData = {}\n    Object.keys(data).forEach(category => {\n        let result  = data[category].filter(item => {\n            let endex = item.createdAt.indexOf('T')\n            let createdAt = item.createdAt.substring(0, endex)\n            return createdAt > compDate\n        })\n        filteredCompData[category] = result\n    })\n    setCompMetrics(filteredCompData)\n\n    // setting previous comparison data based on set frequency to determine 'new' users/orgs rate.\n    let prevFreq = frequency[1] * 2\n    let prevCompDate = moment().subtract(prevFreq, 'days').format('YYYY-MM-DD')\n    let filteredPrevCompData = {}\n    Object.keys(data).forEach(category => {\n        let result  = data[category].filter(item => {\n            let endex = item.createdAt.indexOf('T')\n            let createdAt = item.createdAt.substring(0, endex)\n            return createdAt > prevCompDate && createdAt < compDate\n        })\n        filteredPrevCompData[category] = result\n    })\n    setPrevCompMetrics(filteredPrevCompData)\n\n    // setting previous period totals for comparison to current period total\n    let previousPeriodTotals = {}\n    Object.keys(data).forEach(category => {\n        let result  = data[category].filter(item => {\n            let endex = item.createdAt.indexOf('T')\n            let createdAt = item.createdAt.substring(0, endex)\n            return createdAt < compDate\n        })\n        previousPeriodTotals[category] = result\n    })\n    setPrevPeriodTotals(previousPeriodTotals)\n}\n\nexport default {\n    signInUser,\n    setCompData,\n    fetchData,\n}","import React from 'react'\n\nimport './Metric.css'\n\nlet Metric = (props) => {\n    let metricsDataDisplay = Object.keys(props.metricsData).map(key => {\n        let currentValue = props.metricsData[key].current\n        let pastValue = Math.abs(props.metricsData[key].comparison)\n        let difference = currentValue - pastValue\n        let compClass = difference > 0 ? 'comparison positive' : difference < 0 ? 'comparison negative' : 'comparison'\n        let compArrow = difference > 0 ? '↑' : difference < 0 ? '↓' : null\n        let compPerc = difference === 0 && pastValue === 0 ? (0).toFixed(2) : ((Math.abs(difference) / Math.abs(pastValue)) * 100).toFixed(2)\n        let asterisk = Math.abs(currentValue) > 0 && pastValue === 0 ? '*' : null\n\n        return  <div key={key}className='metric-inline-display'>\n                    <div className='metric-title-container'>\n                        <p>{key[0].toUpperCase()+key.substring(1)} {props.metrics[0].toUpperCase()+props.metrics.substring(1)}</p>\n                    </div>\n                    <div className='metric-data-container'>\n                        <p className='current'>{currentValue}</p>\n                        <p className={compClass}>{compArrow}{compPerc}%{asterisk}</p>\n                    </div>\n            \n                </div>\n    })\n    return (\n        <div className='container'>\n            <div id={props.metrics} className={`metric-container ${props.metrics}-container`} onClick={props.handleMetricClick}>\n                {metricsDataDisplay}\n            </div>\n        </div>\n    )\n}\n\nexport default Metric","import React from 'react'\n\nimport './ComparisonFrequency.css'\n\nlet ComparisonFrequency = (props) => {\n    let monthClass = props.frequency[0] === 'month' ? 'active frequency month' : 'frequency month'\n    let quarterClass = props.frequency[0] === 'quarter' ? 'active frequency quarter' : 'frequency quarter'\n    let yearClass = props.frequency[0] === 'year' ? 'active frequency year' : 'frequency year'\n    return (\n        <div className='comparison-container'>\n            <p className='frequency-title'>Comparison Frequency</p>\n            <div className='frequency-selector'>\n                <p className={monthClass} onClick={() => props.handleFrequencyClick(['month', 30])}>month</p>\n                <p className='divider'>|</p>\n                <p className={quarterClass} onClick={() => props.handleFrequencyClick(['quarter', 91])}>quarter</p>\n                <p className='divider'>|</p>\n                <p className={yearClass} onClick={() => props.handleFrequencyClick(['year', 365])}>year</p>\n            </div>\n        </div>\n    )\n}\n\nexport default ComparisonFrequency","import React from 'react'\n\nimport './Key.css'\nlet Key = () => {\n    return(\n        <div className='key-container'>\n            <div className='demo-container'>\n                <p><span role='img' aria-label='pointer finger'>👉 </span>You are viewing a demo environment. All data is strictly for testing purposes.</p>\n            </div>\n            <div className='percent-change-container'>\n                <p>* Percent change from zero</p>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Key","import React from 'react'\nimport './Spinner.css'\n\nlet Spinner = () => {\n    return (\n        <div className='loader-backdrop'>\n            <div className=\"loader\"></div>\n            <div className=\"loader-text\">Fetching...</div>\n        </div>\n\n        // <div className='loader-backdrop'>\n        //     <div className=\"progress-bar\">\n        //         <div className=\"progress\" style={{width: `${props.progressWidth}%`}}></div>\n        //     </div>\n        //     <div className=\"progress-text\">{props.progressText}</div>\n        // </div>\n\n    )\n}\n\nexport default Spinner","import React from 'react'\n\nimport './Refresh.css'\n\nconst Refresh = (props) => {\n\n    const handleRefreshClick = () => {\n        props.setFetching(true)\n        props.fetchData()\n    }\n    return (\n        <div className='refresh' title='refresh data' onClick={handleRefreshClick}>\n            ⟳\n        </div>\n    )\n}\n\nexport default Refresh","import React, { useState, useEffect } from 'react';\nimport moment from 'moment'\n\nimport query from '../../Utils/query'\n\nimport './Dashboard.css';\nimport Metric from '../Metric/Metric'\nimport ComparisonFrequency from '../ComparisonFrequency/ComparisonFrequency'\n// import Modal from '../Modal/Modal'\nimport Key from '../Key/Key'\nimport Spinner from '../Spinner/Spinner'\nimport Refresh from '../Refresh/Refresh'\n\nlet Dashboard = () => {\n    const [currentMetrics, setCurrentMetrics] = useState([])\n    const [comparisonMetrics, setComparisonMetrics] = useState([])\n    const [previousComparisonMetrics, setPreviousComparisonMetrics] = useState([])\n    const [previousPeriodTotals, setPreviousPeriodTotals] = useState([])\n    const [frequency, setFrequency] = useState(['month', 30])\n    const [userToken, setUserToken] = useState(null)\n    const [fetching, setFetching] = useState(true)\n    // const [selectedMetric, setSelectedMetric] = useState(null)\n    \n    useEffect(() => {\n        query.signInUser(setUserToken)\n    }, [])\n\n    useEffect(() => {\n        if(userToken){\n            query.setCompData(currentMetrics, frequency, setComparisonMetrics, setPreviousComparisonMetrics, setPreviousPeriodTotals)\n        }\n    }, [userToken, frequency])\n    \n    useEffect(() => {\n        if(userToken){\n            handleFetchData()\n        }\n    }, [userToken])\n    \n    // const handleMetricClick = (e) => {\n    //     let selected = metrics.filter(metric => {\n    //         return metric.base === e.target.id\n    //     })\n    //     setSelectedMetric(...selected)\n    // }\n\n    // const handleBackgroundClick = () => {\n    //     setSelectedMetric(null)\n    // }\n\n    const handleFrequencyClick = (freq) => {\n        if (freq[1] !== frequency[1]){\n            setFrequency(freq)\n        }\n    }\n\n    const handleFetchData = () => {\n        query.fetchData(userToken, frequency, setCurrentMetrics, setComparisonMetrics, setPreviousComparisonMetrics, setPreviousPeriodTotals, setFetching)\n    }\n\n    // builds out data structure to compare current to previous periods\n    const nsData = {}\n    let currentActiveUsers = []\n    let prevActiveUsers = []\n    let currentActiveOrgs = []\n    let prevActiveOrgs = []\n    Object.keys(currentMetrics).forEach(m => {\n        let compDate = moment().subtract(frequency[1], 'days').format('YYYY-MM-DD')\n        let prevDate = moment().subtract((frequency[1] * 2), 'days').format('YYYY-MM-DD')\n\n        if (m === 'users') {\n            currentActiveUsers = currentMetrics[m].filter(user => {\n                let endex = user.lastSignInAt ? user.lastSignInAt.indexOf('T') : null\n                let lastSignIn = user.lastSignInAt ? user.lastSignInAt.substring(0, endex) : null\n                let comments = user.comments.filter(comment => {\n                    let createdAtEndex = comment.createdAt ? comment.createdAt.indexOf('T') : null\n                    let createdAt = comment.createdAt ? comment.createdAt.substring(0, createdAtEndex) : null\n                    let updatedAtEndex = comment.updatedAt ? comment.updatedAt.indexOf('T') : null\n                    let updatedAt = comment.updatedAt ? comment.updatedAt.substring(0, updatedAtEndex) : null\n                    return createdAt > compDate || updatedAt > compDate\n                })\n                let createdTasks = user.createdTasks.filter(task => {\n                    let createdAtEndex = task.createdAt ? task.createdAt.indexOf('T') : null\n                    let createdAt = task.createdAt ? task.createdAt.substring(0, createdAtEndex) : null\n                    let updatedAtEndex = task.updatedAt ? task.updatedAt.indexOf('T') : null\n                    let updatedAt = task.updatedAt ? task.updatedAt.substring(0, updatedAtEndex) : null\n                    return createdAt > compDate || updatedAt > compDate\n                })\n                return lastSignIn > compDate || comments.length > 0 || createdTasks.length > 0\n            })\n            prevActiveUsers = currentMetrics[m].filter(user => {\n                let endex = user.lastSignInAt ? user.lastSignInAt.indexOf('T') : null\n                let lastSignIn = user.lastSignInAt ? user.lastSignInAt.substring(0, endex) : null\n                let comments = user.comments.filter(comment => {\n                    let createdAtEndex = comment.createdAt ? comment.createdAt.indexOf('T') : null\n                    let createdAt = comment.createdAt ? comment.createdAt.substring(0, createdAtEndex) : null\n                    let updatedAtEndex = comment.updatedAt ? comment.updatedAt.indexOf('T') : null\n                    let updatedAt = comment.updatedAt ? comment.updatedAt.substring(0, updatedAtEndex) : null\n                    return (createdAt > prevDate && createdAt < compDate) || (updatedAt > prevDate && createdAt < compDate)\n                })\n                let createdTasks = user.createdTasks.filter(task => {\n                    let createdAtEndex = task.createdAt ? task.createdAt.indexOf('T') : null\n                    let createdAt = task.createdAt ? task.createdAt.substring(0, createdAtEndex) : null\n                    let updatedAtEndex = task.updatedAt ? task.updatedAt.indexOf('T') : null\n                    let updatedAt = task.updatedAt ? task.updatedAt.substring(0, updatedAtEndex) : null\n                    return (createdAt > prevDate && createdAt < compDate) || (updatedAt > prevDate && createdAt < compDate)\n                })\n                return (lastSignIn > prevDate && lastSignIn < compDate) || comments.length > 0 || createdTasks.length > 0\n            })\n        }\n\n        if (m === 'organizations') {\n            currentActiveOrgs = currentMetrics[m].map(org => {\n                let activeOrgs = []\n                let activeUsers = org.users.filter(user => {\n                    let endex = user.lastSignInAt ? user.lastSignInAt.indexOf('T') : null\n                    let lastSignIn = user.lastSignInAt ? user.lastSignInAt.substring(0, endex) : null\n                    return lastSignIn > compDate\n                })\n                let activeComments = org.comments.filter(comment => {\n                    let createdAtEndex = comment.createdAt ? comment.createdAt.indexOf('T') : null\n                    let createdAt = comment.createdAt ? comment.createdAt.substring(0, createdAtEndex) : null\n                    let updatedAtEndex = comment.updatedAt ? comment.updatedAt.indexOf('T') : null\n                    let updatedAt = comment.updatedAt ? comment.updatedAt.substring(0, updatedAtEndex) : null\n                    return createdAt > compDate || updatedAt > compDate\n                })\n                let activeQuestions = org.questions.filter(question => {\n                    let createdAtEndex = question.createdAt ? question.createdAt.indexOf('T') : null\n                    let createdAt = question.createdAt ? question.createdAt.substring(0, createdAtEndex) : null\n                    let updatedAtEndex = question.updatedAt ? question.updatedAt.indexOf('T') : null\n                    let updatedAt = question.updatedAt ? question.updatedAt.substring(0, updatedAtEndex) : null\n                    return createdAt > compDate || updatedAt > compDate\n                })\n                let activeSurveys = org.surveys.filter(survey => {\n                    let createdAtEndex = survey.createdAt ? survey.createdAt.indexOf('T') : null\n                    let createdAt = survey.createdAt ? survey.createdAt.substring(0, createdAtEndex) : null\n                    let updatedAtEndex = survey.updatedAt ? survey.updatedAt.indexOf('T') : null\n                    let updatedAt = survey.updatedAt ? survey.updatedAt.substring(0, updatedAtEndex) : null\n                    let changedAtEndex = survey.changedAt ? survey.changedAt.indexOf('T') : null\n                    let changedAt = survey.changedAt ? survey.changedAt.substring(0, changedAtEndex) : null\n                    return createdAt > compDate || updatedAt > compDate || changedAt > compDate\n                })\n                let activeTasks = org.tasks.filter(task => {\n                    let createdAtEndex = task.createdAt ? task.createdAt.indexOf('T') : null\n                    let createdAt = task.createdAt ? task.createdAt.substring(0, createdAtEndex) : null\n                    let updatedAtEndex = task.updatedAt ? task.updatedAt.indexOf('T') : null\n                    let updatedAt = task.updatedAt ? task.updatedAt.substring(0, updatedAtEndex) : null\n                    let completedAtEndex = task.completedAt ? task.completedAt.indexOf('T') : null\n                    let completedAt = task.completedAt ? task.completedAt.substring(0, completedAtEndex) : null\n                    return createdAt > compDate || updatedAt > compDate || completedAt > compDate\n                })\n\n                activeOrgs = [...activeUsers, ...activeComments, ...activeQuestions, ...activeSurveys, ...activeTasks]\n                return activeOrgs\n            }).filter (org => {\n                return org.length >= 1\n            })\n\n            prevActiveOrgs = currentMetrics[m].map(org => {\n                let activeOrgs = []\n\n                let activeUsers = org.users.filter(user => {\n                    let endex = user.lastSignInAt ? user.lastSignInAt.indexOf('T') : null\n                    let lastSignIn = user.lastSignInAt ? user.lastSignInAt.substring(0, endex) : null\n                    return lastSignIn > prevDate && lastSignIn < compDate\n                })\n                let activeComments = org.comments.filter(comment => {\n                    let createdAtEndex = comment.createdAt ? comment.createdAt.indexOf('T') : null\n                    let createdAt = comment.createdAt ? comment.createdAt.substring(0, createdAtEndex) : null\n                    let updatedAtEndex = comment.updatedAt ? comment.updatedAt.indexOf('T') : null\n                    let updatedAt = comment.updatedAt ? comment.updatedAt.substring(0, updatedAtEndex) : null\n                    return (createdAt > prevDate && createdAt < compDate) || (updatedAt > prevDate && updatedAt < compDate)\n                })\n                let activeQuestions = org.questions.filter(question => {\n                    let createdAtEndex = question.createdAt ? question.createdAt.indexOf('T') : null\n                    let createdAt = question.createdAt ? question.createdAt.substring(0, createdAtEndex) : null\n                    let updatedAtEndex = question.updatedAt ? question.updatedAt.indexOf('T') : null\n                    let updatedAt = question.updatedAt ? question.updatedAt.substring(0, updatedAtEndex) : null\n                    return (createdAt > prevDate && createdAt < compDate) || (updatedAt > prevDate && updatedAt < compDate)\n\n                })\n                let activeSurveys = org.surveys.filter(survey => {\n                    let createdAtEndex = survey.createdAt ? survey.createdAt.indexOf('T') : null\n                    let createdAt = survey.createdAt ? survey.createdAt.substring(0, createdAtEndex) : null\n                    let updatedAtEndex = survey.updatedAt ? survey.updatedAt.indexOf('T') : null\n                    let updatedAt = survey.updatedAt ? survey.updatedAt.substring(0, updatedAtEndex) : null\n                    let changedAtEndex = survey.changedAt ? survey.changedAt.indexOf('T') : null\n                    let changedAt = survey.changedAt ? survey.changedAt.substring(0, changedAtEndex) : null\n                    return (createdAt > prevDate && createdAt < compDate) || (updatedAt > prevDate && updatedAt < compDate) || (changedAt > prevDate && changedAt < compDate)\n\n                })\n                let activeTasks = org.tasks.filter(task => {\n                    let createdAtEndex = task.createdAt ? task.createdAt.indexOf('T') : null\n                    let createdAt = task.createdAt ? task.createdAt.substring(0, createdAtEndex) : null\n                    let updatedAtEndex = task.updatedAt ? task.updatedAt.indexOf('T') : null\n                    let updatedAt = task.updatedAt ? task.updatedAt.substring(0, updatedAtEndex) : null\n                    let completedAtEndex = task.completedAt ? task.completedAt.indexOf('T') : null\n                    let completedAt = task.completedAt ? task.completedAt.substring(0, completedAtEndex) : null\n                    return (createdAt > prevDate && createdAt < compDate) || (updatedAt > prevDate && updatedAt < compDate) || (completedAt > prevDate && completedAt < compDate)\n                })\n\n                activeOrgs = [...activeUsers, ...activeComments, ...activeQuestions, ...activeSurveys, ...activeTasks]\n                return activeOrgs\n            }).filter (org => {\n                return org.length >= 1\n            })\n        }\n\n        nsData[m] = comparisonMetrics[m] && previousComparisonMetrics[m] && previousPeriodTotals[m] ? \n        m === 'organizations' || m === 'users' ? \n        {\n            active: {\n                current: m === 'organizations' ? currentActiveOrgs.length : currentActiveUsers.length,\n                comparison: m === 'organizations' ? prevActiveOrgs.length : prevActiveUsers.length\n            },\n            new: {\n                current: comparisonMetrics[m].length,\n                comparison: previousComparisonMetrics[m].length\n            },\n            total: {\n                current: currentMetrics[m].length,\n                comparison: previousPeriodTotals[m].length\n            },\n        } \n        :\n        {\n            new: {\n                current: comparisonMetrics[m].length,\n                comparison: previousComparisonMetrics[m].length\n            },\n            total: {\n                current: currentMetrics[m].length,\n                comparison: previousPeriodTotals[m].length\n            },\n        }\n        \n        : null\n\n    })\n    let metricsDisplay = Object.keys(nsData).map(categoryMetrics => {\n        return <Metric \n                    key={categoryMetrics} \n                    metrics={categoryMetrics}\n                    metricsData={nsData[categoryMetrics]}\n                    frequency={frequency}\n                    // selectedMetric={selectedMetric} \n                    // handleMetricClick={handleMetricClick}\n                    />\n    })\n\n    // let modal = selectedMetric ? <Modal selectedMetric={selectedMetric} handleBackgroundClick={handleBackgroundClick}/> : null\n    let dashDisplay = fetching ? <Spinner/> : \n    <div>\n        {metricsDisplay}\n        <Key />\n    </div>\n\n    return (\n        <div className=\"dashboard-container\" >\n            <div className='logo-refresh-container'>\n                <div className='logo-container'>\n                    <a href='https://newstorycharity.org/' target=\"_blank\"><img className='logo' alt='New Story Logo' src='https://360kk73nf60j1amgkj11crnq-wpengine.netdna-ssl.com/wp-content/themes/newstory/src/img/logo.png'/></a>\n                </div>\n                <Refresh fetchData={handleFetchData} setFetching={setFetching}/>\n            </div>\n            <ComparisonFrequency handleFrequencyClick={handleFrequencyClick} frequency={frequency}/>\n            \n            <div className='title-display'>\n                <p className='titles' id='title-metric'><b>Metric</b></p>\n                <p className='titles' id='title-value'><b>Value</b></p>\n                <p className='titles' id='title-comparison'><b>Comparison</b></p>\n            </div>\n            {dashDisplay}\n        </div>\n    );\n}\n\nexport default Dashboard;","import React from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard/Dashboard'\n\nlet App = () => {\n\n  return (\n    <div className=\"App\">\n        <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}